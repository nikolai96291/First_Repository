#include <iostream>
using namespace std;

class AbstractMatrix
{
protected:
	int n;
	int m;
	float* data;
public:
	virtual AbstractMatrix& operator+(AbstractMatrix&) = 0;
	//virtual AbstractMatrix& operator*(const AbstractMatrix&) = 0;
	//virtual AbstractMatrix& operator*(const int&) = 0;
	virtual AbstractMatrix& operator-(AbstractMatrix&) = 0;
	//virtual AbstractMatrix& reverse() = 0;
	//virtual AbstractMatrix& transpose() = 0;
	//virtual float determinant() = 0;
	virtual ostream& print(ostream& o) = 0;
	virtual istream& read(istream& o) = 0;
	virtual void set(int i, int j, float data) = 0;
	virtual float get(int i, int j) = 0;
	virtual int getN() = 0;
	virtual int getM() = 0;
	//virtual bool failed() = 0;
};
class matrix : public AbstractMatrix
{
public:
	matrix()
	{
		n = 0;
		m = 0;
		data = NULL;
	}
	matrix(const matrix& a)
	{
		this->data = new float[a.n*a.m];
		for (int i = 0; i < a.n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				this->set(i, j, a.data[i*a.n+j]);
			}
		}	
	}
	AbstractMatrix& operator + (AbstractMatrix& a)
	{
		matrix* c = new matrix;
		if (n == a.getN() && m == a.getM())
		{
			c->data = new float[n*m];
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < m; j++)
				{
					c->set(i, j, this->get(i, j) + a.get(i, j));
				}
			}
			return (*c);
		}
		else
		{
			c->n = 0;
			c->m = 0;
			c->data = NULL;
			return (*c);
		}

	}

	AbstractMatrix& operator - (AbstractMatrix& a)
	{
		if (n == a.getN() && m == a.getM())
		{
			matrix c;
			c.data = new float[n*m];
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < m; j++)
				{
					c.set(i, j, this->get(i, j) - a.get(i, j));
				}
			}
			return matrix (c);
		}
		else
		{
			matrix c;
			c.n = 0;
			c.m = 0;
			c.data = NULL;
			return matrix (c);
		}

	}
	matrix& operator = (AbstractMatrix& a)
	{
		this->data = new float[a.getN()*a.getM()];
		for (int i = 0; i < a.getN(); i++)
		{
			for (int j = 0; j < a.getM(); j++)
			{
				this->set(i, j, a.get(i, j));
			}
		}
		return matrix (*this);
	}
	ostream& print(ostream& o)
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				o << get(i, j) << ' ';
			}
			o << endl;
		}
		return(o);
	}
	istream& read(istream& o)
	{
		o >> n;
		o >> m;
		data = new float[n*m];
		float tmp;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				o >> tmp;
				set(i, j, tmp);
			}
		}
		return(o);
	}
	void set(int i, int j, float data)
	{
		this->data[i*m + j] = data;
	}
	float get(int i, int j)
	{
		return(this->data[i*m + j]);
	}
	int getN()
	{
		return(this->n);
	}
	int getM()
	{
		return(this->m);
	}
};
